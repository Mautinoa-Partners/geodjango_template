---

- name: set locale to {{locale}}
  action: command /usr/sbin/update-locale LANG={{locale}} LC_ALL={{locale}}
  become: true

- name: install required system packages.
  action: apt pkg={{item}} state=installed update-cache=yes install_recommends=yes 
  become: true
  with_items:
      - build-essential
      - python-setuptools
      - python-pip
      - supervisor
      - python-apt
      - python-pycurl
      - python-software-properties
      - python-virtualenv
      - python-dev
      - vim
      - libpq-dev
      - supervisor
      - nginx
      - npm
      - nodejs-legacy
      - gfortran
      - cython
      - libgeos-dev
      - gdal-bin
      - libgdal-dev


- name: do upgrades to newly installed packages
  action: apt upgrade=dist
  become: true

- name: create python virtualenv in opt
  action: pip virtualenv=/opt/venv virtualenv_command=/usr/bin/virtualenv virtualenv_site_packages=yes requirements=/vagrant/python_requirements.txt state=latest
  become: true

- name: if there is a django project, delete it
  file: path=/vagrant/{{project_name}} state=absent 
  become: true
  ignore_errors: yes
  when: create_new_project == True

- name: create a new django project in the /home/vagrant directory using the new virtualenv
  shell: "cd /vagrant/; /opt/venv/bin/django-admin.py startproject {{project_name}}"
  become: true
  when: create_new_project == True

#- name: delete the default settings.py file in the new django project.
#  file: dest=/vagrant/{{project_name}}/{{project_name}}/settings.py state=absent
#  become: true
#  when: create_new_project == True
#
#- name: create the new settings.py file using the template (fills in database settings and sets static_root)
#  template: src=draft_django_settings.py.j2 dest=/vagrant/{{project_name}}/{{project_name}}/settings.py owner=vagrant group=vagrant mode=0644
#  when: create_new_project == True
#
#- name: create symbolic link from /vagrant/project_name to /opt/venv/project_name
#  file: src=/vagrant/{{ item.src }} dest=/opt/venv/{{ item.dest }} state=link
#  become: true
#  with_items:
#    - { src: "{{project_name}}", dest: "{{project_name}}" }
#
#- name: delete existing /vagrant/static
#  file: path=/vagrant/static state=absent
#  become: true
#  when: create_new_static == True
#
#- name: create /vagrant/static for use in nginx
#  file: path=/vagrant/static state=directory
#  become: true
#  when: create_new_static == True
#
#- name: create the gunicorn config file in /opt/venv/gunicorn_config.py via template
#  template: src=gunicorn_config.py.j2 dest=/opt/venv/gunicorn_config.py owner=root group=root mode=0644
#  become: true
#
#- name: run django's manage.py migrate to get everything connected and wired up with initial tables created for project.
#  action: django_manage app_path=/opt/venv/{{project_name}} command=migrate virtualenv=/opt/venv
#  become: true
#
#- name: run django's manage.py collectstatic task to pull all known static files into the new static directory
#  action: django_manage app_path=/opt/venv/{{project_name}} command=collectstatic virtualenv=/opt/venv
#  become: true
#
#- name: create the nginx sites-available file by template
#  template: src=nginx-sites-available.conf.j2 dest=/etc/nginx/sites-available/{{ item.dest }} owner=vagrant group=vagrant mode=0644
#  become: true
#  with_items:
#    - { dest: "{{project_name}}" }
#
#- name: create a symlink between nginx project config in sites-available and sites-enabled
#  file: src=/etc/nginx/sites-available/{{ item.path }} dest=/etc/nginx/sites-enabled/{{ item.dest }} state=link
#  with_items:
#    - { path: "{{project_name}}", dest: "{{project_name}}" }
#  become: true
#
#- name: remove the default from /etc/sites-enabled/
#  file: path=/etc/nginx/sites-enabled/default state=absent
#  become: true
#
#- name: stop nginx and prevent from starting on boot
#  service: name=nginx enabled=no state=stopped
#  become: true
#
#- name: prevent nginx from daemonizing
#  lineinfile: dest=/etc/nginx/nginx.conf line="daemon off;" state=present insertafter="^pid" regexp="^daemon"
#  become: true
#
#- name: create gunicorn.conf file for supervisor
#  template: src=gunicorn_supervisor_conf dest=/etc/supervisor/conf.d/gunicorn.conf owner=root group=root mode=0644
#  become: true
#
#- name: create nginx.conf file for supervisor
#  template: src=nginx_supervisor_conf dest=/etc/supervisor/conf.d/nginx.conf owner=root group=root mode=0644
#  become: true
#
#- name: stop supervisord
#  service: name=supervisor state=stopped
#  become: true
#  ignore_errors: true
#
#- name: start supervisord
#  service: name=supervisor state=started
#  become: true
#
#- name: gunicorn to supervisor and ensure it's running
#  supervisorctl: name=gunicorn state=started
#  become: true
#
#- name: nginx to supervisor and ensure it's running
#  supervisorctl: name=nginx state=started
#  become: true
#
#- name: create the npm package.json file to the static directory
#  template: src=package.json dest=/vagrant/static/package.json owner=root group=root mode=0644
#  become: true
#
#- name: install npm components
#  become: true
#  npm: path=/vagrant/static/ state=latest
#  when: create_new_static == True

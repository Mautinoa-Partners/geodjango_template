{
  "name": "pixelworks",
  "version": "1.0.0",
  "description": "Utilities for working with ImageData in Workers",
  "main": "lib/index.js",
  "scripts": {
    "pretest": "eslint lib test examples",
    "test": "karma start --single-run",
    "start": "karma start",
    "bundle": "mkdir -p dist && browserify lib/index.js --standalone pixelworks > dist/pixelworks.js",
    "prepublish": "npm run bundle"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/pixelworks.git"
  },
  "bugs": {
    "url": "https://github.com/tschaub/pixelworks/issues"
  },
  "license": "MIT",
  "devDependencies": {
    "browserify": "^10.2.4",
    "chai": "^3.0.0",
    "eslint": "^0.24.0",
    "eslint-config-tschaub": "^1.0.0",
    "karma": "^0.12.37",
    "karma-browserify": "^4.2.1",
    "karma-chrome-launcher": "^0.2.0",
    "karma-mocha": "^0.2.0",
    "karma-sauce-launcher": "^0.2.14",
    "mocha": "^2.2.5",
    "sinon": "^1.15.4"
  },
  "readme": "# **âš™ pixelworks**\n\nUtilities for working with [`ImageData`](https://developer.mozilla.org/en-US/docs/Web/API/ImageData) in [`Workers`](https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker).\n\n## Install\n\nThe `pixelworks` package is meant to be used in a browser with a CommonJS module loader (e.g. [Browserify](http://browserify.org/) or [Webpack](http://webpack.github.io/)).  Add it as a dependency to your project with `npm`:\n\n    npm install pixelworks\n\n## Use\n\n    var pixelworks = require('pixelworks');\n\nThe package also comes with a standalone build in the `dist` directory that can be added to a page with a script tag.  If a module loader is not present, this script will make a global `pixelworks` object available.\n\n## API\n\n### `new Processor(options)`\n\nA processor runs pixel or image operations in workers.\n\n    var processor = new pixelworks.Processor(options);\n\n#### Supported options\n\n * <a id=\"optionsimageops\">`imageOps : boolean`</a> - By default, operations will be called for each pixel.  By setting `imageOps: true`, operations will be called with an `ImageData` object.\n\n * <a id=\"optionsoperations\">`operation : Function`</a> - A function that processes input data and returns output data.  The operation will be called with two arguments: an array of inputs, and a user storage object.  By default, operations will be called for each pixel in the input data, and the first argument is an array of input pixels (each a `[R, G, B, A]` array).  If `imageOps` is `false`, the first argument will be an array of `ImageData` objects.  The second object is the user storage object passed to the `process` method.\n\n Operations return processed output data.  For pixel-wise operations, this must be an output pixel (a `[R, G, B, A]` array).  For image operations, this must be an `ImageData` object.\n\n Because operations run in workers, they must only operate on the arguments they are given.\n\n * <a id=\"optionslib\">`lib : Object`</a> - An optional lookup of functions that can be accessed by an operation run in a worker.  Because operations are run in workers, they cannot access functions from the scope where they are authored.  The `lib` object can be used to pass additional library functions that are made available in the worker scope.  For example, if `{lib: {someFunc: function() {/* do something */}}}` were provided, the operation could call `someFunc()`.\n\n * <a id=\"optionsthreads\">`threads : number`</a> - Pixel-wise operations can be run in parallel in multiple worker threads.  By default, a single worker thread is created for running operations.  Setting `threads: 2` would process half of the input pixels in one thread and half in another.  For image type operations, `threads` cannot be greater than `1`.  If you want to force operations to run in the main (UI) thread, set `threads: 0`.\n\n * <a id=\"optionsqueue\">`queue : number`</a> - Maximum queue length.  This limits the number of pending workers when `process` is called multiple times before work completes.  If you want to call `process` many times (in response to user generated events for example), set `queue: 1`, and only one worker will be pending at a time.\n\n### `processor.process(inputs, meta, callback)`\n\nRun the operation on an array of input image data.\n\n * `inputs : Array.<ImageData>` - Array of pixels or image data (depending on the operation type).\n * `meta : Object` - A user data object.  This is passed to all operations and must be serializable.\n * `callback : function(Error, ImageData, Object)` - Called when work completes.  The first argument is any error.  The second is the `ImageData` generated by the operation.  The third is the user data object.  When `process` is called repeatedly, a queue of pending workers will be generated.  If this queue exceeds the maximum `queue` length, workers will be removed from the queue and the callback will be called with `null` for the second `ImageData` argument.\n\n### `processor.destroy()`\n\nStop responding to any completed work and destroy the processor.\n\n\n[![Current Status](https://secure.travis-ci.org/tschaub/pixelworks.svg?branch=master)](https://travis-ci.org/tschaub/pixelworks)\n",
  "readmeFilename": "readme.md",
  "_id": "pixelworks@1.0.0",
  "dist": {
    "shasum": "3924846c7f30ddda0ee8cc830ad817bea4a134ac"
  },
  "_from": "pixelworks@1.0.0",
  "_resolved": "https://registry.npmjs.org/pixelworks/-/pixelworks-1.0.0.tgz"
}

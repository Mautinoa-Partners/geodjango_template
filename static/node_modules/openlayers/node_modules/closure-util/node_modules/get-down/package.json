{
  "name": "get-down",
  "version": "0.5.0",
  "description": "Download and optionally extract files",
  "repository": {
    "type": "git",
    "url": "git://github.com/tschaub/get-down.git"
  },
  "bugs": {
    "url": "https://github.com/tschaub/get-down/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://tschaub.mit-license.org/"
    }
  ],
  "main": "lib/index.js",
  "scripts": {
    "test": "grunt --stack test",
    "debug-test": "node --stack-trace-limit=50 --debug-brk ./node_modules/.bin/grunt cafemocha",
    "start": "grunt --stack start"
  },
  "license": "MIT",
  "devDependencies": {
    "chai": "~1.9.1",
    "grunt": "~0.4.5",
    "grunt-cafe-mocha": "~0.1.12",
    "grunt-cli": "~0.1.13",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-newer": "~0.7.0",
    "mock-fs": "~2.3.1",
    "nock": "0.27.1",
    "rimraf": "^2.2.8"
  },
  "dependencies": {
    "q": "1.0.0",
    "graceful-fs": "3.0.2",
    "junk": "1.0.0",
    "tar": "1.0.1",
    "mout": "0.10.0",
    "decompress-zip": "0.0.8",
    "tmp": "0.0.24",
    "request-progress": "0.3.1",
    "retry": "0.6.1",
    "request": "2.42.0"
  },
  "readme": "# `get-down`\n\n**Download and optionally extract files.**\n\nThis draws heavily from [Bower's](http://bower.io/) download and extract utilities.  Those utilities are [copyright Twitter](https://github.com/bower/bower/blob/master/LICENSE) and carry the MIT license.\n\n## Example use\n\nDownload a file and save it to the working directory with the same name:\n```js\nvar download = require('get-down');\ndownload('http://example.com/file.txt');\n```\n\nSame as above, but saving to a different directory:\n```js\nvar download = require('get-down');\ndownload('http://example.com/file.txt', {dest: 'different/directory'});\n// the provided directory must already exist\n```\n\nIn addition to providing a `dest` directory, you can provide a new file name:\n```js\nvar download = require('get-down');\ndownload('http://example.com/file.txt', {dest: 'different/name.txt'});\n// the provided file must not already exist\n```\n\nThe `extract` option can be used to extract `tar`, `tgz`, `gz`, or `zip` files:\n```js\nvar download = require('get-down');\ndownload('http://example.com/file.zip', {dest: 'some/directory', extract: true});\n// the dest directory must already exist\n```\n\nAs you might expect, `download` is all async.  You get an event emitter in return:\n```js\nvar download = require('get-down');\ndownload('http://example.com/file.txt').on('end', function(dest) {\n  console.log('downloaded', dest);\n});\n```\n\n## API Docs\n\n## `download(url, [options])`\n\n * **url** - `string` URL for the resource you want to download.  E.g. `'http://example.com/file.txt'` or `'https://example.com/archive.zip'`.\n * **options** - `Object` An optional object with properties to configure the download operation.  See the available options below.\n\nDownload a resource.  Returns an [`EventEmitter`](http://nodejs.org/api/events.html#events_class_events_eventemitter) that emits the events described below.\n\n### Options\n\n#### <a id=\"optionsdest\">options.dest</a>\n\n * type: `string`\n * default: `process.cwd()`\n\nThe destination directory or file path for saving downloaded resources.  If `dest` is a directory, it must already exist.  If `dest` is a path to a file, the parent directory must already exist (existing files will not be overwritten).  If the [`extract` option](#optionsextract) is `false` and you provide a directory here, the filename will be derived from the provided `url` (e.g. a `url` of `'http://example.com/some/file.txt'` and a `dest` of `'local/path'` will result in `'local/path/file.txt'`).  Finally, if the [`extract` option](#optionsextract) is `true`, you must provide the path to an existing directory.\n\n#### <a id=\"optionsextract\">options.extract</a>\n\n * type: `boolean`\n * default: `false`\n\nExtract the downloaded archive.  If the `url` points to a .zip, .tar, .tgz, or .gz file, you can optionally extract/defalate it after download.  If not obvious from the file extension, the archive type will be determined from the content type header of the response.\n\n\n### Events\n\n#### `progress` event\n\nEmitted periodically during the download.  Listeners will receive a state object representing one of two types of progress.  As more data is received, the state object will have the following properties:\n\n * **received** - `number` The cumulative number of bytes received.\n * **total** - `number|null` If the response headers provided it, this will be the total content size in bytes.  If not provided, it will be `null`.\n * **percent** - `number|null` As a convenience, if `total` is available, this will be the percentage of the total file size received (otherwise it will be `null`).\n\nIf the download fails due to network issues, it will be retried (up to 5 times).  In the event of a retry, progress listeners will receive a state object with the following properties:\n\n * **retry** - `boolean` This will always be `true` in the event of a retry.\n * **timeout** - `number` The number of milliseconds before the download is attempted again.\n * **error** - `Error` An error representing the failure.\n\nA progress listener might handle both types of progress with code like this:\n\n```js\n  download('http://example.com/big-file.txt').on('progress', function(state) {\n    if (state.retry) {\n      var delay = Math.round(state.timeout / 1000) + 's';\n      console.log('Download failed, retrying again in ' + delay);\n    } else {\n      var progress = Math.floor(state.received / 1024) + 'K';\n      if (state.percent) {\n        progress = state.percent + '% (' + progress + ')';\n      }\n      console.log('Received ' + progress);\n    }\n  });\n```\n\n#### `error` event\n\nEmitted in the event of an error during download or extraction.  Listeners will receive an `Error` object with a message describing what went wrong.  Temporary files created during a download will be removed when your program completes.\n\n#### `end` event\n\nEmitted in upon success.  Listeners will be called with a (`string`) path to the saved resource.  If the [`extract` option](optionsextract) is `true`, this will be a path to the directory where the resource was extracted.  Otherwise, it will be a path to the saved file.\n\n## That's all\n\nPlease [report any issues](https://github.com/tschaub/get-down/issues) you find.  To contribute, fork and start out by running the tests.\n\n```\nnpm install\nnpm test\n```\n\nYou can run `npm start` to have the linter and tests run continuously during development.\n\n[![Current Status](https://secure.travis-ci.org/tschaub/get-down.png?branch=master)](https://travis-ci.org/tschaub/get-down)\n",
  "readmeFilename": "readme.md",
  "_id": "get-down@0.5.0",
  "dist": {
    "shasum": "2a1e16d82b56b6cdd6bed29f47dee9dd127f3d23"
  },
  "_from": "get-down@0.5.0",
  "_resolved": "https://registry.npmjs.org/get-down/-/get-down-0.5.0.tgz"
}

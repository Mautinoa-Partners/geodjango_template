{
  "name": "closure-util",
  "version": "1.10.0",
  "description": "Utilities for Closure Library based projects.",
  "main": "lib/index.js",
  "homepage": "https://github.com/openlayers/closure-util",
  "repository": {
    "type": "git",
    "url": "git://github.com/openlayers/closure-util.git"
  },
  "bugs": {
    "url": "https://github.com/openlayers/closure-util/issues"
  },
  "license": "MIT",
  "dependencies": {
    "acorn": "2.1.0",
    "async": "0.2.9",
    "fs-extra": "^0.17.0",
    "gaze": "0.4.3",
    "get-down": "0.5.0",
    "glob": "3.2.7",
    "graceful-fs": "3.0.2",
    "handlebars": "1.3.0",
    "lodash": "2.4.1",
    "minimatch": "0.2.14",
    "mkdirp": "0.5.0",
    "nomnom": "~1.8.0",
    "npmlog": "0.0.6",
    "rimraf": "2.2.8",
    "send": "0.12.2",
    "socket.io": "1.3.7",
    "temp": "^0.8.1"
  },
  "devDependencies": {
    "chai": "~1.8.1",
    "grunt": "~0.4.2",
    "grunt-cli": "~0.1.11",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-mocha-test": "~0.8.1",
    "supertest": "^0.15.0"
  },
  "scripts": {
    "postinstall": "node ./bin/closure-util.js update",
    "test": "grunt test",
    "start": "grunt test watch"
  },
  "bin": {
    "closure-util": "./bin/closure-util.js"
  },
  "readme": "# Closure Util\n\nUtilities for working with Closure Library projects.\n\n[![Current Status](https://secure.travis-ci.org/openlayers/closure-util.png?branch=master)](https://travis-ci.org/openlayers/closure-util)\n\n## API\n\n### <a id=\"manager\">`new Manager(config)`</a>\n\nA script manager parses scripts for dependencies and watches those scripts for changes, updating dependencies as scripts are added, modified, or deleted.  A manager is used in conjunction with a [server](#server) for providing a debug loader during development.\n\nMain options:\n\n * **config.lib** - `string|Array.<string>` A list of [path patterns](https://github.com/isaacs/minimatch) for your library scripts (e.g. `'lib/**/*.js'`).  Note that path delimiters in these patterns should always be forward slashes (even on Windows).\n * **config.main** - `string|Array.<string>` Patterns for your main script(s).\n\nMore advanced options:\n\n * **config.ignoreRequires** - `string|undefined` A regular expression string. The manager will ignore matching `goog.require`'s that cannot be satisfied instead of throwing an exception. Optional.\n\nThe manager is an [event emitter](http://nodejs.org/api/events.html#events_class_events_eventemitter) that emits the following events:\n\n * **ready** - The manager is ready (all scripts parsed and dependencies resolved).\n * **error** - Listeners will be called with an `Error` instance representing what went wrong.\n\n### <a id=\"server\">`new Server(config)`</a>\n\nCreate a development server providing a script loader and static assets.\n\n * **config.manager** - `Manager` A script manager.\n * **config.root** - `string` Path to root directory for scripts and static assets (default is `process.cwd()`).\n * **config.loader** - `string` URL path for script loader.\n\n```js\nvar closure = require('closure-util');\n\nvar manager = new closure.Manager({\n  lib: ['path/to/app/src/**/*.js'],\n  main: 'path/to/app/examples/*.js'\n});\nmanager.on('error', function(e) { throw e; });\nmanager.on('ready', function() {\n  var server = new closure.Server({\n    manager: manager,\n    root: 'path/to/app', // static resources will be served from here\n    loader: '/examples/lib.js' // the script loader will be provided here\n    // this assumes the main script can be derived from the query string like:\n    // <script src='lib.js?main=example-1.js'></script>\n    // this can be customized by providing a getMain method that accepts a\n    // request object and returns the path to the main script\n  });\n  server.listen(3000);\n});\n```\n\n### <a id=\"getdependencies\">`getDependencies(config, callback)`</a>\n\nThe `getDependencies` function generates a list of script paths in dependency order.\n\n * **config** - `Object` A configuration object of the same form as the [manager config](#manager-config).\n * **callback** - `function(Error, Array.<string>)` Called with a list of script paths in dependency order (or a parsing error).\n\n### <a id=\"compile\">`compile(options, callback)`</a>\n\nThe `compile` function drives the Closure Compiler.\n\n * **options.compile** - `Object` [Options](compiler-options.txt) for the compiler (without the `--` prefix).  E.g. the `--output_wrapper` option could be specified with `{output_wrapper: '(function(){%output%})();'}`.  For options that can be specified multiple times, provide an array of values (e.g. `{js: ['one.js', 'two.js']}`).  For options that are flags (no value), provide a boolean (e.g. `{use_types_for_optimization: true}`).\n * **options.cwd** - `string` Optional path to set as the current working directory.  Default is `process.cwd()`.  All relative paths in the compiler options must be relative to `cwd`.\n * **options.jvm** - `Array.<string>` Optional arguments for the JVM.  If this argument is absent (if the function is called with two arguments), `['-server', '-XX:+TieredCompilation']` will be used as JVM arguments.  To use [different arguments](https://github.com/google/closure-compiler/wiki/FAQ#what-are-the-recommended-java-vm-command-line-options), provide an array.\n * **callback** - `function(Error, string)` Called with the compiler output (or any compilation error).\n\n## <a id=\"configuration\">Configuration</a>\n\nThe `closure-util` package downloads the Closure Compiler and Closure Library when installed.  To use a different version of these resources, you can provide some basic configuration options before running `npm install`.  Your configuration options can come from a number of different sources.  The most straightforward way is to include a `closure-util.json` file in your project.  You can also provide configuration options via environment variables.  Environment variables have the `closure_` prefix in front of the options described below (e.g. `closure_log_level` to specify the `log_level` option).\n\nAvailable configuration options (see `default-config.json` for default values):\n\n * `compiler_url` - URL for the compiler zip archive (e.g. `http://dl.google.com/closure-compiler/compiler-latest.zip`).\n * `library_url` - URL for the Closure Library zip archive (e.g. `https://github.com/google/closure-library/archive/master.zip`).\n\n## CLI\n\nThe `closure-util` command line utility provides `update` commands for updating (or installing) specific versions of the Closure Compiler and Closure Library for use with your project, a `build` command for building your project using the Closure Compiler, and a `serve` command for starting a development server for your project.\n\n * `closure-util update` - Update both the Compiler and Library.\n * `closure-util update-compiler` - Update the Compiler.\n * `closure-util update-library` - Update the Library.\n * `closure-util build` - Build a JavaScript application.\n * `closure-util serve` - Start a development server.\n * `closure-util --help` - Display command usage and options.\n\nSee the [configuration](#configuration) section above for information on how to configure URLs for specific versions of the Compiler or Library.  The `closure-util` utility will look for this configuration when executing one of the `update`, `update-compiler` or `update-library` commands.\n\nThis is how the `build` command is used:\n\n    closure-util build config.json app.min.js\n\nwhere `config.json` is a build config file and `app.min.js` in the output file including the compiled code. As an example for a build config file see the [`config.json`](test/fixtures/config.json) file used in the `closure-util` tests. The config file should include a `\"lib\"` and a `\"compile\"` sections.\n\nThis is how the `serve` command is used:\n\n    closure-util serve config.json\n\nwhere `config.json` is a config file. You can look at the [`config.json`](test/fixtures/config.json) again. For the `serve` command the config file should include a `\"lib\"` and a `\"serve\"` sections.\n\n## Development\n\nSetup:\n\n    npm install\n\nRun tests:\n\n    npm test\n\nRun tests continuously during development:\n\n    npm start\n\n## Publishing\n\nTo publish a new version of the `closure-util` package, first create a tag, and then publish.  Creating a tag can be done with the [`npm version` command](https://www.npmjs.org/doc/cli/npm-version.html).  This is a handy way to update `package.json` and create a git tag named like the new version.  The [`npm publish` command](https://www.npmjs.org/doc/cli/npm-publish.html) is used to publish the package to the [registry](https://www.npmjs.org/package/closure-util).\n\nExample of publishing a new minor version (to increment the major version or create a patch release, replace `minor` with `major` or `patch`).  This assumes you have the latest from [`master`](https://github.com/openlayers/closure-util/tree/master) and your remote is named `openlayers`.\n\n```bash\nnpm version minor\ngit push --tags openlayers master && npm publish\n```\n\nTo publish a new version, you need to have [signed up](https://www.npmjs.org/signup) for an account with the registry.  After signing up for an account, contact one of the current `closure-util` maintainers and ask to be added (with [`npm owner`](https://www.npmjs.org/doc/cli/npm-owner.html)).\n",
  "readmeFilename": "readme.md",
  "_id": "closure-util@1.10.0",
  "dist": {
    "shasum": "62fbe525be879630c115fd9382a99fa9be67f053"
  },
  "_from": "closure-util@1.10.0",
  "_resolved": "https://registry.npmjs.org/closure-util/-/closure-util-1.10.0.tgz"
}
